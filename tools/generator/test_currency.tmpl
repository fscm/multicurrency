# -*- coding: UTF-8 -*-
#
# copyright: 2020-2021, Frederico Martins
# author: Frederico Martins <http://github.com/fscm>
# license: SPDX-License-Identifier: MIT

"""Tests for the [CURRENCY_NAME] representation."""

from decimal import Context
from pytest import raises
from multicurrency import Currency, [CURRENCY_CLASS]
from multicurrency import (
    CurrencyMismatchException,
    CurrencyTypeException)


CONTEXT = Context(prec=28, rounding='ROUND_HALF_EVEN').copy()


def test_[CURRENCY_VARIABLE]():
    """test_[CURRENCY_VARIABLE]."""
    amount = CONTEXT.create_decimal(1) / CONTEXT.create_decimal(7)
    [CURRENCY_VARIABLE] = [CURRENCY_CLASS](amount=amount)
    decimal = CONTEXT.create_decimal(amount)
    assert [CURRENCY_VARIABLE].amount == decimal
    assert [CURRENCY_VARIABLE].code == '[CODE]'
    assert [CURRENCY_VARIABLE].currency == '[CURRENCY]'
    assert [CURRENCY_VARIABLE].decimal_places == [DECIMAL_PLACES]
    assert [CURRENCY_VARIABLE].decimal_sign == '[DECIMAL_SIGN]'
    assert [CURRENCY_VARIABLE].grouping_sign == '[GROUPING_SIGN_ALT]'
    assert not [CURRENCY_VARIABLE].international
    assert [CURRENCY_VARIABLE].symbol == '[SYMBOL]'
    assert [CURRENCY_VARIABLE].__hash__() == hash((decimal, '[CURRENCY]', '[CODE]'))
    assert [CURRENCY_VARIABLE].__repr__() == (
        '[CURRENCY_CLASS](amount: 0.1428571428571428571428571429, '
        'currency: "[CURRENCY]", '
        'symbol: "[SYMBOL]", '
        'code: "[CODE]", '
        'decimal_places: "[DECIMAL_PLACES]", '
        'decimal_sign: "[DECIMAL_SIGN]", '
        'grouping_sign: "[GROUPING_SIGN_ALT]", '
        'international: False)')
    assert [CURRENCY_VARIABLE].__str__() == '[SYMBOL][1DIV7]'


def test_[CURRENCY_VARIABLE]_negative():
    """test_[CURRENCY_VARIABLE]_negative."""
    amount = -100
    [CURRENCY_VARIABLE] = [CURRENCY_CLASS](amount=amount)
    decimal = CONTEXT.create_decimal(amount)
    assert [CURRENCY_VARIABLE].code == '[CODE]'
    assert [CURRENCY_VARIABLE].currency == '[CURRENCY]'
    assert [CURRENCY_VARIABLE].decimal_places == [DECIMAL_PLACES]
    assert [CURRENCY_VARIABLE].decimal_sign == '[DECIMAL_SIGN]'
    assert [CURRENCY_VARIABLE].grouping_sign == '[GROUPING_SIGN_ALT]'
    assert not [CURRENCY_VARIABLE].international
    assert [CURRENCY_VARIABLE].symbol == '[SYMBOL]'
    assert [CURRENCY_VARIABLE].__hash__() == hash((decimal, '[CURRENCY]', '[CODE]'))
    assert [CURRENCY_VARIABLE].__repr__() == (
        '[CURRENCY_CLASS](amount: -100, '
        'currency: "[CURRENCY]", '
        'symbol: "[SYMBOL]", '
        'code: "[CODE]", '
        'decimal_places: "[DECIMAL_PLACES]", '
        'decimal_sign: "[DECIMAL_SIGN]", '
        'grouping_sign: "[GROUPING_SIGN_ALT]", '
        'international: False)')
    assert [CURRENCY_VARIABLE].__str__() == '[SYMBOL]-100[DECIMAL_PART]'


def test_[CURRENCY_VARIABLE]_custom():
    """test_[CURRENCY_VARIABLE]_custom."""
    amount = 1000
    [CURRENCY_VARIABLE] = [CURRENCY_CLASS](
        amount=amount,
        decimal_places=5,
        decimal_sign='[GROUPING_SIGN_ALT]',
        grouping_sign='[DECIMAL_SIGN]',
        international=True)
    decimal = CONTEXT.create_decimal(amount)
    assert [CURRENCY_VARIABLE].amount == decimal
    assert [CURRENCY_VARIABLE].code == '[CODE]'
    assert [CURRENCY_VARIABLE].currency == '[CURRENCY]'
    assert [CURRENCY_VARIABLE].decimal_places == 5
    assert [CURRENCY_VARIABLE].decimal_sign == '[GROUPING_SIGN_ALT]'
    assert [CURRENCY_VARIABLE].grouping_sign == '[DECIMAL_SIGN]'
    assert [CURRENCY_VARIABLE].international
    assert [CURRENCY_VARIABLE].symbol == '[SYMBOL]'
    assert [CURRENCY_VARIABLE].__hash__() == hash((decimal, '[CURRENCY]', '[CODE]'))
    assert [CURRENCY_VARIABLE].__repr__() == (
        '[CURRENCY_CLASS](amount: 1000, '
        'currency: "[CURRENCY]", '
        'symbol: "[SYMBOL]", '
        'code: "[CODE]", '
        'decimal_places: "5", '
        'decimal_sign: "[GROUPING_SIGN_ALT]", '
        'grouping_sign: "[DECIMAL_SIGN]", '
        'international: True)')
    assert [CURRENCY_VARIABLE].__str__() == '[CURRENCY] 1[DECIMAL_SIGN]000[GROUPING_SIGN_ALT]00000'


def test_[CURRENCY_VARIABLE]_changed():
    """test_c[CURRENCY_VARIABLE]_changed."""
    [CURRENCY_VARIABLE] = [CURRENCY_CLASS](amount=1000)
    with raises(
            AttributeError,
            match='can\'t set attribute'):
        [CURRENCY_VARIABLE].amount = 999
    with raises(
            AttributeError,
            match='can\'t set attribute'):
        [CURRENCY_VARIABLE].currency = 'EUR'
    with raises(
            AttributeError,
            match='can\'t set attribute'):
        [CURRENCY_VARIABLE].symbol = 'â‚¬'
    with raises(
            AttributeError,
            match='can\'t set attribute'):
        [CURRENCY_VARIABLE].code = '978'
    with raises(
            AttributeError,
            match='can\'t set attribute'):
        [CURRENCY_VARIABLE].decimal_places = 3
    with raises(
            AttributeError,
            match='can\'t set attribute'):
        [CURRENCY_VARIABLE].decimal_sign = ','
    with raises(
            AttributeError,
            match='can\'t set attribute'):
        [CURRENCY_VARIABLE].grouping_sign = '.'
    with raises(
            AttributeError,
            match='can\'t set attribute'):
        [CURRENCY_VARIABLE].international = True


def test_[CURRENCY_VARIABLE]_math_add():
    """test_[CURRENCY_VARIABLE]_math_add."""
    [CURRENCY_VARIABLE]_one = [CURRENCY_CLASS](amount=1)
    [CURRENCY_VARIABLE]_two = [CURRENCY_CLASS](amount=2)
    [CURRENCY_VARIABLE]_three = [CURRENCY_CLASS](amount=3)
    currency = Currency(amount=1, currency='OTHER')
    with raises(
            CurrencyMismatchException,
            match='unsupported operation between currency [CURRENCY] and OTHER.'):
        _ = [CURRENCY_VARIABLE]_one + currency
    with raises(
            CurrencyTypeException,
            match=('unsupported operation between <class \'multicurrency.'
                   '[CURRENCY_VARIABLE].[CURRENCY_CLASS]\'> '
                   'and <class \'str\'>.')):
        _ = [CURRENCY_VARIABLE]_one.__add__('1.00')
    assert ([CURRENCY_VARIABLE]_one + [CURRENCY_VARIABLE]_two) == [CURRENCY_VARIABLE]_three


def test_currency_slots():
    """test_currency_slots."""
    euro = [CURRENCY_CLASS](amount=1000)
    with raises(
            AttributeError,
            match=(
                '\'[CURRENCY_CLASS]\' '
                'object has no attribute \'new_variable\'')):
        euro.new_variable = 'fail' # pylint: disable=assigning-non-slot
