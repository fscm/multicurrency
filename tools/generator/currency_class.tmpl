

class __CURRENCY_CLASS__(Currency):
    """__CURRENCY_NAME__ currency representation.

    Simple usage example:

        >>> from multicurrency import __CURRENCY_CLASS__
        >>> __CURRENCY_VARIABLE__ = __CURRENCY_CLASS__(
        ...     amount=123456.789)
        >>> print(__CURRENCY_VARIABLE__)
        __EXAMPLE_OUTPUT__

    For more details see `multicurrency.currency.Currency` .

    Args:
        amount (Union[int, float, Decimal]): Represented value.
        decimal_places (int, optional): Number of decimal places for the
            currency representation. Defaults to __DECIMAL_PLACES__,
        decimal_sign (str, optional): Decimal symbol. Defaults to '__DECIMAL_SIGN_STR__'.
        grouping_places (int, optional): Number of digits for grouping.
            Defaults to __GROUPING_PLACES__,
        grouping_sign (str, optional): Grouping symbol. Defaults to '__GROUPING_SIGN_STR__'.
        international (bool, optional): Identifies the currency using
            the 'currency' value instead of the 'symbol'. Defaults to
            False.
        symbol_separator (str, optional): Separation between the symbol
            and the value. Defaults to '__SYMBOL_SEPARATOR_STR__'.
        symbol_ahead (bool, optional): True if symbol goes ahead of the
            value. False otherwise. Defaults to __SYMBOL_AHEAD__.
    """

    __slots__ = []

    def __new__(  # pylint: disable=signature-differs,disable=unused-argument
            cls,
            amount: Union[int, float, Decimal],
            decimal_places: Optional[int] = __DECIMAL_PLACES__,
            decimal_sign: Optional[str] = '__DECIMAL_SIGN__',
            grouping_places: Optional[int] = __GROUPING_PLACES__,
            grouping_sign: Optional[str] = '__GROUPING_SIGN_ALT__',
            international: Optional[bool] = False,
            symbol_ahead: Optional[bool] = __SYMBOL_AHEAD__,
            symbol_separator: Optional[str] = '__SYMBOL_SEPARATOR__',
            **other) -> '__CURRENCY_CLASS__':
        """Class creator.

        Returns:
            __CURRENCY_CLASS__: new opbject.
        """
        return Currency.__new__(
            cls,
            amount=amount,
            alpha_code='__CURRENCY__',
            numeric_code='__CODE__',
            symbol='__SYMBOL__',
            symbol_separator=symbol_separator,
            symbol_ahead=symbol_ahead,
            localized_symbol='__LOCALIZED_SYMBOL__',
            decimal_places=decimal_places,
            decimal_sign=decimal_sign,
            grouping_places=grouping_places,
            grouping_sign=grouping_sign,
            convertion='__CONVERTION__',
            international=international)
