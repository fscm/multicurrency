#!/usr/bin/env python3
# -*- coding: UTF-8 -*-
#
# copyright: 2020-2021, Frederico Martins
# author: Frederico Martins <http://github.com/fscm>
# license: SPDX-License-Identifier: MIT

"""Currency generator.

Creates specific versions of Currency based on the info present on the
`currency.csv` file.

Simple usage example:

    ./generator
    ls _multicurrency/
    ls _tests/

The `currency.csv` file format is one currency per line with the details
separated by a coma (',') and in the following order:

    * "Currency"
    * "Symbol"
    * "Digital Code"
    * "Class"
    * "Name"
    * "Country"
    * "Decimal Places"
    * "Decimal Sign"
    * "Grouping Sign"

`currency.csv` file example:

    "Currency","Symbol","Digital Code","Class","Name","Country","Decimal Places","Decimal Sign","Grouping Sign"
    "AFN","Af","971","Afghani","Afghani","Afghanistan","2",",","."
    "ALL","L","008","Lek","Lek","Albania","2",",","."
    "AMD","Դ","051","Dram","Armenian Dram","Armenia","2",".",","
"""

import csv
import re
import os
from decimal import Context

CONTEXT = Context(prec=28, rounding='ROUND_HALF_EVEN').copy()
CSV_FILE = 'currency.csv'
CURRENCY_CLASS = 'currency_class.tmpl'
CURRENCY_MODULE = 'currency_module.tmpl'
CURRENCY_TESTS = 'currency_tests.tmpl'

workfolder = os.path.dirname(os.path.realpath(__file__))
#workfolder = os.getcwd()
re_nospace = dict(
    (re.escape(k), v) for k,v in {' ': '', '’': '', '\'': ''}.items())
re_underscore = dict(
    (re.escape(k), v) for k,v in {' ': '_', '’': '', '\'': ''}.items())
comp_nospace = re.compile('|'.join(re_nospace.keys()))
comp_underscore = re.compile('|'.join(re_underscore.keys()))

decimal = CONTEXT.create_decimal(1) / CONTEXT.create_decimal(7)
currencies = {}
countries = {}
text_module = ''
text_class = ''
text_tests = ''

with open(f'{workfolder}/{CURRENCY_MODULE}', 'r') as file_in_module:
    text_module = file_in_module.read()

with open(f'{workfolder}/{CURRENCY_CLASS}', 'r') as file_in_class:
    text_class = file_in_class.read()

with open(f'{workfolder}/{CURRENCY_TESTS}', 'r') as file_in_tests:
    text_tests = file_in_tests.read()


print('Loading CSV data...')
with open(f'{workfolder}/{CSV_FILE}', 'r') as csv_file:
    csv_reader = csv.reader(csv_file, delimiter=',')
    headers = [
        f'{h.lower().replace(" ", "_")}' for h in next(csv_reader, None)]
    for record in csv_reader:
        currency = dict(zip(headers, record))
        currency_class = comp_underscore.sub(
            lambda l: re_nospace[re.escape(l.group(0))],
            currency['name'])
        currency_module = comp_underscore.sub(
            lambda l: re_underscore[re.escape(l.group(0))],
            currency['class'].lower())
        currency_variable = comp_underscore.sub(
            lambda l: re_underscore[re.escape(l.group(0))],
            currency['name'].lower())
        decimal_zeros = '0' * int(currency['decimal_places'])
        decimal_sign = f'{currency["decimal_sign"]}' if int(currency['decimal_places']) else ''
        decimal_part = f'{decimal_sign}{decimal_zeros}'
        grouping_sign_alt = f'\\{currency["grouping_sign"]}' if currency[
            'grouping_sign'] == '\'' else f'{currency["grouping_sign"]}'
        _ = countries.setdefault(
            currency['country'],
            (currency['name'], f'{currency_module}.{currency_class}'))
        t = currencies.setdefault(
            currency_module,
            {'name': currency['class'], 'currencies': {}})
        _ = t['currencies'].setdefault(currency_variable, {
            '__CODE__': currency['digital_code'],
            '__CURRENCY__': currency['currency'],
            '__CURRENCY_CLASS__': currency_class,
            '__CURRENCY_NAME__': currency['name'],
            '__CURRENCY_VARIABLE__': currency_variable,
            '__DECIMAL_PART__': decimal_part,
            '__DECIMAL_PLACES__': currency['decimal_places'],
            '__DECIMAL_SIGN__': currency['decimal_sign'],
            '__GROUPING_SIGN__': currency['grouping_sign'],
            '__GROUPING_SIGN_ALT__': grouping_sign_alt,
            '__SYMBOL__': currency['symbol']})


print('Creating currency types...')
for currency_module in currencies:
    out_text = re.sub(
        '__CURRENCY_MODULE__',
        currencies[currency_module]['name'], text_module)
    for _, values in currencies[currency_module]['currencies'].items():
        re_values = dict((re.escape(k), v) for k,v in values.items())
        comp_values = re.compile('|'.join(re_values.keys()))
        out_text = out_text + comp_values.sub(
            lambda l: re_values[re.escape(l.group(0))], text_class)
    with open(
            f'{workfolder}/_multicurrency/{currency_module}.py',
            'w+') as file_out:
        _ = file_out.write(out_text)
        _ = file_out.truncate()


print('Creating currency tests...')
for currency_module in currencies:
    for currency, values in currencies[currency_module]['currencies'].items():
        re_values = dict((re.escape(k), v) for k,v in values.items())
        comp_values = re.compile('|'.join(re_values.keys()))
        out_text = comp_values.sub(
            lambda l: re_values[re.escape(l.group(0))], text_tests)
        out_text = re.sub(
            '__1DIV7__',
            str(round(decimal, int(values['__DECIMAL_PLACES__']))).replace(
                '.', values['__DECIMAL_SIGN__']), out_text)
        out_text = re.sub('__CURRENCY_MODULE__', currency_module, out_text)
        with open(
                f'{workfolder}/_tests/test_{currency}.py', 'w+') as file_out:
            _ = file_out.write(out_text)
            _ = file_out.truncate()


print()
print('Generating __init__.py file data...')
all_classes = []
print()
print('Imports:')
for currency_module, data in sorted(currencies.items()):
    classes = [data['currencies'][c]['__CURRENCY_CLASS__'] for c in data['currencies']]
    if len(classes) > 1:
        print(f'from .{currency_module} import (')
        print('    ' + ',\n    '.join(classes) + ')')
    else:
        print(f'from .{currency_module} import {classes[0]}')
    all_classes.extend(classes)
print()
print('__all__:')
print('    \'' + '\',\n    \''.join(sorted(all_classes)) + '\']')
# print()
# print('docstring supported currencies:')
# import multicurrency
# supported = []
# for currency_module, data in currencies.items():
#     for _, values in data['currencies'].items():
#         currency_class = values['__CURRENCY_CLASS__']
#         eg = getattr(multicurrency, currency_class)(1000)
#         supported.append((
#             currency_class,
#             '`'+f"multicurrency.{currency_module}.{currency_class}"'`'+f' ({eg})'))
# supported_sorted = [ c for _, c in sorted(supported)]
# print(',\n'.join(supported_sorted))
