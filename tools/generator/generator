#!/usr/bin/env python3
# -*- coding: UTF-8 -*-
#
# copyright: 2020-2022, Frederico Martins
# author: Frederico Martins <http://github.com/fscm>
# license: SPDX-License-Identifier: MIT

# pylint: disable=invalid-name,line-too-long
"""Currency generator.

Creates specific versions of Currency based on the info present on the
`currency.csv` file.

Simple usage example:

    ./generator
    ls _multicurrency/
    ls _tests/

The `currency.csv` file format is one currency per line with the details
separated by a coma (',') and in the following order:

    * "Currency"
    * "Symbol"
    * "Digital Code"
    * "Class"
    * "Name"
    * "Country"
    * "Decimal Places"
    * "Decimal Sign"
    * "Grouping Sign"
    * "Grouping Places"
    * "Symbol Separator"
    * "Symbol Ahead"
    * "Convertion"

`currency.csv` file example:

    "Currency","Symbol","Localized Symbol","Digital Code","Class","Name","Country","Decimal Places","Decimal Sign","Grouping Sign","Grouping Places","Symbol Separator","Symbol Ahead","Convertion"
    "AFN","؋","؋","971","Afghani","Afghani","Afghanistan","2","\u066B","\u066C","3","\u00A0","True","۰۱۲۳۴۵۶۷۸۹-"
    "AUD","$","AU$","036","Dollar","Australian Dollar","Australia","2",".",",","3","","True",""
    "BDT","৳","৳","050","Taka","Taka","Bangladesh","2",".",",","3","","False","০১২৩৪৫৬৭৮৯-"
"""

import csv
import re
import os
from decimal import Context

CONTEXT = Context(prec=28, rounding='ROUND_HALF_EVEN').copy()
CSV_FILE = 'currency.csv'
CURRENCY_CLASS = 'currency_class.tmpl'
CURRENCY_MODULE = 'currency_module.tmpl'
TEST_CLASS = 'test_class.tmpl'
TEST_MODULE = 'test_module.tmpl'

workfolder = os.path.dirname(os.path.realpath(__file__))
#workfolder = os.getcwd()
re_nospace = dict(
    (re.escape(k), v) for k, v in {' ': '', '’': '', '\'': ''}.items())
re_underscore = dict(
    (re.escape(k), v) for k, v in {' ': '_', '’': '', '\'': ''}.items())
comp_nospace = re.compile('|'.join(re_nospace.keys()))
comp_underscore = re.compile('|'.join(re_underscore.keys()))

decimal = CONTEXT.create_decimal(1) / CONTEXT.create_decimal(7)
example = CONTEXT.create_decimal('123456.789')
negative = CONTEXT.create_decimal('-100')
custom = CONTEXT.create_decimal('1000')
currencies = {}
crypto_currencies = {}
countries = {}
text_module = ''
text_class = ''
text_tests = ''

with open(
        f'{workfolder}/{CURRENCY_MODULE}',
        mode='r',
        encoding='utf-8') as file_in_module:
    text_module = file_in_module.read()

with open(
        f'{workfolder}/{CURRENCY_CLASS}',
        mode='r',
        encoding='utf-8') as file_in_class:
    text_class = file_in_class.read()

with open(
        f'{workfolder}/{TEST_MODULE}',
        mode='r',
        encoding='utf-8') as file_in_test_module:
    text_test_module = file_in_test_module.read()

with open(
        f'{workfolder}/{TEST_CLASS}',
        mode='r',
        encoding='utf-8') as file_in_test_class:
    text_test_class = file_in_test_class.read()


def _format(  # pylint: disable=missing-return-doc,missing-return-type-doc
        _amount,
        _decimal_places,
        _grouping_places,
        _alpha_code,
        _grouping_sign,
        _decimal_sign,
        _symbol,
        _symbol_ahead,
        _symbol_separator,
        _localized_symbol,
        _convertion,
        _international=False,
        _localized=False):
    _p = max(_decimal_places, 0)
    _rounded = str(round(_amount, _p))
    if not _p:
        _rounded = f'{_rounded}.'
    _converted = re.sub(
        rf'(\d)(?=(\d{{{_grouping_places}}})+\.)', r'\1,', _rounded)
    if not _p:
        _converted = _converted[:-1]
    _grouping_sign = bytes(_grouping_sign, 'utf-8').decode('unicode_escape')
    _symbol_separator = bytes(
        _symbol_separator,
        'utf-8').decode('unicode_escape')
    if _international:
        return f'{_alpha_code} {_converted}'
    if _convertion:
        _c = re.sub(
            r'\\u[0-9a-fA-F]{4}',
            lambda x: eval('"' + x.group() + '"'), # pylint: disable=eval-used
            _convertion)
        _t = dict(zip('0123456789-,.', _c))
        _converted = ''.join([_t.get(c, c) for c in _converted])
    _d = re.sub(
        r'\\u[0-9a-fA-F]{4}',
        lambda x: eval('"' + x.group() + '"'), # pylint: disable=eval-used
        _decimal_sign)
    _g = re.sub(
        r'\\u[0-9a-fA-F]{4}',
        lambda x: eval('"' + x.group() + '"'), # pylint: disable=eval-used
        _grouping_sign)
    _converted = _converted.replace('.', 'X').replace(',', _g).replace('X', _d)
    if _localized:
        _symbol = _localized_symbol
    if _symbol_ahead:
        return f'{_symbol}{_symbol_separator}{_converted}'
    return f'{_converted}{_symbol_separator}{_symbol}'


print('Loading CSV data...')
with open(f'{workfolder}/{CSV_FILE}', mode='r', encoding='utf-8') as csv_file:
    csv_reader = csv.reader(csv_file, delimiter=',')
    headers = [
        f'{h.lower().replace(" ", "_")}' for h in next(csv_reader, None)]
    for record in csv_reader:
        if len(record) == 0:
            continue
        currency = dict(zip(headers, record))
        currency_class = comp_underscore.sub(
            lambda l: re_nospace[re.escape(l.group(0))],
            currency['name'])
        currency_module = comp_underscore.sub(
            lambda l: re_underscore[re.escape(l.group(0))],
            currency['class'].lower())
        currency_variable = comp_underscore.sub(
            lambda l: re_underscore[re.escape(l.group(0))],
            currency['name'].lower())
        decimal_zeros = '0' * int(currency['decimal_places'])
        decimal_sign = f'{currency["decimal_sign"]}' if int(currency['decimal_places']) else ''
        decimal_part = f'{decimal_sign}{decimal_zeros}'
        grouping_sign_alt = f'\\{currency["grouping_sign"]}' if currency[
            'grouping_sign'] == '\'' else f'{currency["grouping_sign"]}'
        symbol_ahead = currency['symbol_ahead'] == 'True'
        _ = countries.setdefault(
            currency['country'],
            (currency['name'], f'{currency_module}.{currency_class}'))
        if currency_module == 'crypto':
            t = crypto_currencies.setdefault(
                currency_module,
                {'name': currency['class'], 'currencies': {}})
        else:
            t = currencies.setdefault(
                currency_module,
                {'name': currency['class'], 'currencies': {}})
        _ = t['currencies'].setdefault(currency_variable, {
            '__CODE__': currency['digital_code'],
            '__CURRENCY__': currency['currency'],
            '__CURRENCY_CLASS__': currency_class,
            '__CURRENCY_NAME__': currency['name'],
            '__CURRENCY_VARIABLE__': currency_variable,
            '__DECIMAL_PART__': decimal_part,
            '__DECIMAL_PLACES__': currency['decimal_places'],
            '__DECIMAL_SIGN__': currency['decimal_sign'],
            '__DECIMAL_SIGN_STR__': bytes(
                currency['decimal_sign'], 'utf-8').decode('unicode_escape'),
            '__GROUPING_PLACES__': currency['grouping_places'],
            '__GROUPING_SIGN__': currency['grouping_sign'],
            '__GROUPING_SIGN_STR__': bytes(
                currency['grouping_sign'], 'utf-8').decode('unicode_escape'),
            '__GROUPING_SIGN_ALT__': grouping_sign_alt,
            '__SYMBOL__': currency['symbol'],
            '__SYMBOL_SEPARATOR__': currency['symbol_separator'],
            '__SYMBOL_SEPARATOR_STR__': bytes(
                currency['symbol_separator'], 'utf-8').decode('unicode_escape'),
            '__SYMBOL_AHEAD__': currency['symbol_ahead'],
            '__SYMBOL_AHEAD_ALT__': '' if symbol_ahead else 'not ',
            '__LOCALIZED_SYMBOL__': currency['localized_symbol'],
            '__EXAMPLE_OUTPUT__': _format(
                example,
                int(currency['decimal_places']),
                int(currency['grouping_places']),
                currency['currency'],
                currency['grouping_sign'],
                currency['decimal_sign'],
                currency['symbol'],
                symbol_ahead,
                currency['symbol_separator'],
                currency['localized_symbol'],
                currency['convertion']),
            '__EXAMPLE_1DIV7__': _format(
                decimal,
                int(currency['decimal_places']),
                int(currency['grouping_places']),
                currency['currency'],
                currency['grouping_sign'],
                currency['decimal_sign'],
                currency['symbol'],
                symbol_ahead,
                currency['symbol_separator'],
                currency['localized_symbol'],
                currency['convertion']),
            '__EXAMPLE_NEGATIVE__': _format(
                negative,
                int(currency['decimal_places']),
                int(currency['grouping_places']),
                currency['currency'],
                currency['grouping_sign'],
                currency['decimal_sign'],
                currency['symbol'],
                symbol_ahead,
                currency['symbol_separator'],
                currency['localized_symbol'],
                currency['convertion']),
            '__EXAMPLE_CUSTOM__': _format(
                custom,
                5,
                2,
                currency['currency'],
                currency['decimal_sign'],
                grouping_sign_alt,
                currency['symbol'],
                False,
                '_',
                currency['localized_symbol'],
                '',
                True,
                False),
            '__EXAMPLE_LOCALIZED__': _format(
                example,
                int(currency['decimal_places']),
                int(currency['grouping_places']),
                currency['currency'],
                currency['grouping_sign'],
                currency['decimal_sign'],
                currency['symbol'],
                symbol_ahead,
                currency['symbol_separator'],
                currency['localized_symbol'],
                currency['convertion'],
                False,
                True),
            '__CONVERTION__': currency['convertion']})


print('Creating currency types...')
for currency_module, currency_info in currencies.items():
    out_text = re.sub(
        '__CURRENCY_MODULE__',
        currency_info['name'], text_module)
    for _, values in currency_info['currencies'].items():
        re_values = dict((re.escape(k), v) for k, v in values.items())
        comp_values = re.compile('|'.join(re_values.keys()))
        out_text = out_text + comp_values.sub(
            lambda l: re_values[re.escape(l.group(0))], # pylint: disable=cell-var-from-loop
            text_class)
    with open(
            f'{workfolder}/_multicurrency/{currency_module}.py',
            mode='w+',
            encoding='utf-8') as file_out:
        _ = file_out.write(out_text)
        _ = file_out.truncate()
for currency_module, currency_info in crypto_currencies.items():
    out_text = re.sub(
        '__CURRENCY_MODULE__',
        currency_info['name'], text_module)
    for _, values in currency_info['currencies'].items():
        re_values = dict((re.escape(k), v) for k, v in values.items())
        comp_values = re.compile('|'.join(re_values.keys()))
        out_text = out_text + comp_values.sub(
            lambda l: re_values[re.escape(l.group(0))], # pylint: disable=cell-var-from-loop
            text_class)
    with open(
            f'{workfolder}/_multicurrency/{currency_module}.py',
            mode='w+',
            encoding='utf-8') as file_out:
        _ = file_out.write(out_text)
        _ = file_out.truncate()


print('Creating currency tests...')
for currency_module, currency_info in currencies.items():
    out_text = re.sub(
        '__CURRENCY_MODULE__',
        currency_info['name'], text_test_module)
    currency_class_list = []
    for currency, values in currency_info['currencies'].items():
        currency_class_list.append(values['__CURRENCY_CLASS__'])
        re_values = dict((re.escape(k), v) for k, v in values.items())
        comp_values = re.compile('|'.join(re_values.keys()))
        out_text = out_text + comp_values.sub(
            lambda l: re_values[re.escape(l.group(0))],  # pylint: disable=cell-var-from-loop
            text_test_class)
        out_text = re.sub('__CURRENCY_MODULE__', currency_module, out_text)
    if len(currency_class_list) > 1:
        __CURRENCY_CLASS_LIST__ = '(\n    ' + ',\n    '.join(currency_class_list) + ')'
    else:
        __CURRENCY_CLASS_LIST__ = currency_class_list[0]
    out_text = re.sub(
        '__CURRENCY_CLASS_LIST__',
        __CURRENCY_CLASS_LIST__,
        out_text)
    with open(
            f'{workfolder}/_tests/test_{currency_module}.py',
            mode='w+',
            encoding='utf-8') as file_out:
        _ = file_out.write(out_text)
        _ = file_out.truncate()
for currency_module, currency_info in crypto_currencies.items():
    out_text = re.sub(
        '__CURRENCY_MODULE__',
        currency_info['name'], text_test_module)
    currency_class_list = []
    for currency, values in currency_info['currencies'].items():
        currency_class_list.append(values['__CURRENCY_CLASS__'])
        re_values = dict((re.escape(k), v) for k, v in values.items())
        comp_values = re.compile('|'.join(re_values.keys()))
        out_text = out_text + comp_values.sub(
            lambda l: re_values[re.escape(l.group(0))],  # pylint: disable=cell-var-from-loop
            text_test_class)
        out_text = re.sub('__CURRENCY_MODULE__', currency_module, out_text)
    if len(currency_class_list) > 1:
        __CURRENCY_CLASS_LIST__ = '(\n    ' + ',\n    '.join(currency_class_list) + ')'
    else:
        __CURRENCY_CLASS_LIST__ = currency_class_list[0]
    out_text = re.sub(
        '__CURRENCY_CLASS_LIST__',
        __CURRENCY_CLASS_LIST__,
        out_text)
    with open(
            f'{workfolder}/_tests/test_{currency_module}.py',
            mode='w+',
            encoding='utf-8') as file_out:
        _ = file_out.write(out_text)
        _ = file_out.truncate()


print()
print('Generating __init__.py file data...')
all_classes = []
all_crypto_classes = []

print()
print('Imports:')
for currency_module, data in sorted({**currencies, **crypto_currencies}.items()):
    classes = [data['currencies'][c]['__CURRENCY_CLASS__'] for c in data['currencies']]
    if len(classes) > 1:
        print(f'from .{currency_module} import (')
        print('    ' + ',\n    '.join(classes) + ')')
    else:
        print(f'from .{currency_module} import {classes[0]}')
    if currency_module == 'crypto':
        all_crypto_classes.extend(classes)
    else:
        all_classes.extend(classes)
print()
print('__all__:')
print('    \'' + '\',\n    \''.join(sorted(all_classes) + sorted(all_crypto_classes)) + '\']')

print()
print('docstring supported currencies:')
supported = []
for currency_module, data in currencies.items():
    for _, values in data['currencies'].items():
        currency_class = values['__CURRENCY_CLASS__']
        eg_locale = values['__EXAMPLE_OUTPUT__']
        eg_localized = values['__EXAMPLE_LOCALIZED__']
        eg_international = _format(
                example, int(values['__DECIMAL_PLACES__']),
                int(values['__GROUPING_PLACES__']),
                values['__CURRENCY__'], '', '', '', False, '', '', '', True)
        supported.append((
            currency_class, (
            f'* `multicurrency.{currency_module}.{currency_class}` ({eg_locale} | {eg_localized} | {eg_international})',
            f'* `{currency_class}` ({eg_locale} | {eg_localized} | {eg_international})')))
supported_sorted = [c[0] for _, c in sorted(supported)]
print(',\n'.join(supported_sorted))

print()
print('docstring supported crypto currencies:')
supported_crypto = []
for currency_module, data in crypto_currencies.items():
    for _, values in data['currencies'].items():
        currency_class = values['__CURRENCY_CLASS__']
        eg_locale = values['__EXAMPLE_OUTPUT__']
        eg_localized = values['__EXAMPLE_LOCALIZED__']
        eg_international = _format(
                example, int(values['__DECIMAL_PLACES__']),
                int(values['__GROUPING_PLACES__']),
                values['__CURRENCY__'], '', '', '', False, '', '', '', True)
        supported_crypto.append((
            currency_class, (
            f'* `multicurrency.{currency_module}.{currency_class}` ({eg_locale} | {eg_localized} | {eg_international})',
            f'* `{currency_class}` ({eg_locale} | {eg_localized} | {eg_international})')))
supported_crypto_sorted = [c[0] for _, c in sorted(supported_crypto)]
print(',\n'.join(supported_crypto_sorted))

print()
print('Generating README.txt file data...')

print()
print('readme supported currencies:')
supported_sorted = [c[1] for _, c in sorted(supported)]
print(',\n'.join(supported_sorted))
print()

print()
print('readme supported crypto currencies:')
supported_crypto_sorted = [c[1] for _, c in sorted(supported_crypto)]
print(',\n'.join(supported_crypto_sorted))
print()

# pylint: enable=invalid-name,line-too-long
