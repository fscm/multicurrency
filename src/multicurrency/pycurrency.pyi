from decimal import Decimal
from typing import Optional, Tuple, Union

Numerical = Union[int, float, Decimal]

class Currency:
    def __new__(cls, amount: Union[str, int, float, Decimal], alpha_code: Optional[str] = ..., numeric_code: Optional[str] = ..., symbol: Optional[str] = ..., localized_symbol: Optional[str] = ..., convertion: Optional[str] = ..., pattern: Optional[str] = ...) -> Currency: ...
    def __abs__(self) -> Currency: ...
    def __add__(self, other: object) -> Currency: ...
    def __bool__(self) -> bool: ...
    def __ceil__(self) -> Currency: ...
    def __copy__(self) -> Currency: ...
    def __divmod__(self, other: Numerical) -> Tuple['Currency', 'Currency']: ...
    def __eq__(self, other: object) -> bool: ...
    def __float__(self) -> float: ...
    def __floor__(self) -> Currency: ...
    def __floordiv__(self, other: Numerical) -> Currency: ...
    def __format__(self, fmt: str = ...) -> str: ...
    def __ge__(self, other: object) -> bool: ...
    def __gt__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def __int__(self) -> int: ...
    def __le__(self, other: object) -> bool: ...
    def __lt__(self, other: object) -> bool: ...
    def __mod__(self, other: Numerical) -> Currency: ...
    def __mul__(self, other: Numerical) -> Currency: ...
    def __ne__(self, other: object) -> bool: ...
    def __neg__(self) -> Currency: ...
    def __pos__(self) -> Currency: ...
    def __recreate__(self, amount: Union[str, int, float, Decimal]) -> Currency: ...
    def __reduce__(self) -> Tuple[type, Tuple[object, ...]]: ...
    def __round__(self, precision: Optional[int] = ...) -> Currency: ...
    def __rsub__(self, other: object) -> Currency: ...
    def __sub__(self, other: object) -> Currency: ...
    def __truediv__(self, other: Numerical) -> Currency: ...
    __deepcopy__: Currency
    __rmul__: Currency
    def international(self, precision: int = ...) -> str: ...
    def is_signed(self) -> bool: ...
    def localized(self, precision: int = ...) -> str: ...
    def precision(self, precision: int = ...) -> str: ...
    @property
    def amount(self) -> Decimal: ...
    @property
    def alpha_code(self) -> str: ...
    @property
    def numeric_code(self) -> str: ...
    @property
    def symbol(self) -> str: ...
    @property
    def localized_symbol(self) -> str: ...
    @property
    def convertion(self) -> str: ...
    @property
    def pattern(self) -> str: ...
