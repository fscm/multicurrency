#!/usr/bin/env python3
# -*- coding: UTF-8 -*-
#
# copyright: 2020-2022, Frederico Martins
# author: Frederico Martins <http://github.com/fscm>
# license: SPDX-License-Identifier: MIT

# pylint: disable=invalid-name,line-too-long
"""Currency generator.

Creates specific versions of Currency based on the info present on the
`currency.csv` file.

Simple usage example:

    ./generator

The `currency.csv` file format is one currency per line with the details
separated by a coma (',') and in the following order:

    * "Currency"
    * "Symbol"
    * "Digital Code"
    * "Class"
    * "Name"
    * "Country"
    * "Format"
    * "Convertion"

`currency.csv` file example:

    "Currency","Symbol","Localized Symbol","Digital Code","Class","Name","Country","Format","Convertion"
    "BDT","৳","৳","050","Taka","Taka","Bangladesh","2.,3%a%s","০১২৩৪৫৬৭৮৯-,."
    "EUR","€","€","978","Euro","Euro","","2,.3%a\u00A0%s",""
    "USD","$","US$","840","Dollar","US Dollar","United States of America","2.,3%-%s%u",""
"""

import csv
import re
import os
import sys
from dataclasses import dataclass
from typing import Final, Tuple
from decimal import Decimal
from re import (
    escape as _escape,
    compile as _compile,
    match as _match,
    sub as _sub)
from mako.template import Template


WORKDIR: Final[str] = os.path.dirname(os.path.realpath(__file__))
DATADIR: Final[str] = os.path.join(WORKDIR, 'data')
TEMPLATESDIR: Final[str] = os.path.join(WORKDIR, 'templates')
CURDIR: Final[str] = os.getcwd()
#OUTPUTDIR: Final[str] = os.path.join(CURDIR, 'output')
OUTPUTDIR: Final[str] = os.path.join(WORKDIR, 'output')
CURRENCIESDIR: Final[str] = os.path.join(OUTPUTDIR, 'currencies')
TESTSDIR: Final[str] = os.path.join(OUTPUTDIR, 'test_currencies')

DATAFILE: Final[str] = os.path.join(DATADIR, 'currency.csv')
INITFILE: Final[str] = os.path.join(TEMPLATESDIR, '__init__.mako')
MODULEFILE: Final[str] = os.path.join(TEMPLATESDIR, 'currency.mako')
TESTFILE: Final[str] = os.path.join(TEMPLATESDIR, 'test.mako')

TEST_CUSTOM_VALUES: Tuple[int] = (1_000, -1_000)
TEST_DEFAULT_VALUES: Tuple[object] = (
    '3.14', 3.14, 10, Decimal(10), '-3.14', -3.14, -10, Decimal(-10))


@dataclass(frozen=True, slots=True)
class T:
    """Currency tests data."""
    test_default: Tuple[str]
    test_custom: Tuple[str]


@dataclass(frozen=True, slots=True)
class E:
    """Currency example."""
    value: float
    variable: str
    output: str
    docstring: Tuple[str]


@dataclass(frozen=False, slots=True)
class C:
    """Currency data representation."""
    alpha_code: str
    class_name: str
    class_lname: str
    convertion: str
    country: str
    main_class: str
    name: str
    numeric_code: str
    pattern: str
    symbol: str
    localized_symbol: str
    example: E
    tests: T


def _format(value, pattern, data) -> str:
    """_format method.

    Args:
        value (Union[str, int, float, Decimal]): Value.
        pattern (str): Formating specifications.
        data (C): Currency data representation.

    Returns:
        str: Formated value.
    """
    value = Decimal(str(value))
    pattern = pattern.encode().decode('unicode_escape')
    data_pattern = data.pattern.encode().decode('unicode_escape')
    regxpr = (
        r'^(?P<decimal_places>\d+)?'
        r'(?P<decimal_sign>[^\d%])?'
        r'(?P<grouping_sign>[^\d%])?'
        r'(?P<grouping_places>\d+)?'
        r'(?P<format>.+)?$')
    values = _match(regxpr, data_pattern).groupdict()
    matches = _match(regxpr, pattern.strip())
    new_values = {k: v for k, v in matches.groupdict().items() if v}
    values = {**values, **new_values}
    decimal_places = int(values['decimal_places'])
    decimal_sign = values['decimal_sign']
    grouping_sign = values['grouping_sign']
    grouping_places = int(values['grouping_places'])
    currency_format = values['format']
    rounded = str(round(value, decimal_places))
    parts = rounded.split('.')
    parts[0] = _sub(
        rf'(\d)(?=(\d{{{grouping_places or -1}}})+$)',
        r'\1,',
        f'{parts[0]}')
    amount = '.'.join(parts)
    converted = amount
    if data.convertion:
        translator = dict(zip('0123456789-', data.convertion))
        converted = ''.join([translator.get(c, c) for c in converted])
    converted = converted.replace('.', 'X').replace(
        ',', grouping_sign).replace('X', decimal_sign)
    sign = '-' * value.is_signed()
    amount_unsign = amount.lstrip('-')
    converted_unsign = converted.lstrip('-')
    rep = {
        '%s': data.symbol,
        '%S': data.localized_symbol,
        '%c': data.alpha_code,
        '%a': converted,
        '%A': amount,
        '%u': converted_unsign,
        '%U': amount_unsign,
        '%-': sign,
        '%%': '%'}
    rep = dict((_escape(k), v) for k, v in rep.items())
    fmt = _compile('|'.join(rep.keys()))
    return fmt.sub(lambda m: rep[_escape(m.group(0))], currency_format)


def _international(value, data) -> str:
    """_international method.

    Args:
        value (Union[str, int, float, Decimal]): Value.
        data (C): Currency data representation.

    Returns:
        str: Formated value.
    """
    value = Decimal(str(value))
    regxpr = (
        r'^(?P<decimal_places>\d+)?'
        r'(?P<decimal_sign>[^\d%])?'
        r'(?P<grouping_sign>[^\d%])?'
        r'(?P<grouping_places>\d+)?'
        r'(?P<format>.+)?$')
    values = _match(regxpr, data.pattern).groupdict()
    parts = str(round(value, int(values['decimal_places']))).split('.')
    parts[0] = _sub(r'(\d)(?=(\d{3})+$)', r'\1,', f'{parts[0]}')
    amount = '.'.join(parts)
    return f'{amount} {data.alpha_code}'


def main() -> None:
    """main method"""
    init_tmpl = Template(filename=INITFILE)
    module_tmpl = Template(filename=MODULEFILE)
    test_tmpl = Template(filename=TESTFILE)

    re_nospace = dict(
        (re.escape(k), v) for k, v in {' ': '', '’': '', '\'': ''}.items())
    re_underscore = dict(
        (re.escape(k), v) for k, v in {' ': '_', '’': '', '\'': ''}.items())
    comp_nospace = re.compile('|'.join(re_nospace.keys()))
    comp_underscore = re.compile('|'.join(re_underscore.keys()))

    crypto_currencies = {}
    currencies = {}

    print('Loading CSV data...')
    with open(DATAFILE, mode='r', encoding='utf-8') as csv_file:
        csv_reader = csv.reader(csv_file, delimiter=',')
        headers = [
            f'{h.lower().replace(" ", "_")}' for h in next(csv_reader, None)]

        for record in csv_reader:
            if len(record) == 0:
                continue
            currency = dict(zip(headers, record))
            c = C(
                alpha_code = currency['currency'],
                class_name = comp_nospace.sub(
                    lambda l: re_nospace[re.escape(l.group(0))],
                    currency['name']),
                class_lname = comp_underscore.sub(
                    lambda l: re_underscore[re.escape(l.group(0))],
                    currency['name'].lower()),
                convertion = currency['convertion'],
                country = currency['country'],
                main_class = currency['class'],
                name = currency['name'],
                numeric_code = currency['digital_code'],
                pattern = currency['format'],
                symbol = currency['symbol'],
                localized_symbol = currency['localized_symbol'],
                example=None,
                tests = None)
            c.tests = T(
                test_default = tuple(
                    str((v, str(v), _format(v, currency['format'], c)))
                    for v in TEST_DEFAULT_VALUES),
                test_custom = tuple(
                    str((v, _format(v, r'5,.2%s%u%-', c)))
                    for v in TEST_CUSTOM_VALUES))
            c.example = E(
                value=123456.789,
                variable=c.class_lname,
                output=_format(123456.789, currency['format'], c),
                docstring=(_format(123456.789, c.pattern.replace('%s', '%S'), c), _international(123456.789, c)))
            module = comp_underscore.sub(
                lambda l: re_underscore[re.escape(l.group(0))],
                currency['class'].lower())
            if module == 'crypto':
                i = crypto_currencies.setdefault(
                    module,
                    {'name': currency['class'], 'currencies': []})
            else:
                i = currencies.setdefault(
                    module,
                    {'name': currency['class'], 'currencies': []})
            i['currencies'].append(c)

    print('Creating currency types...')
    if not os.path.exists(CURRENCIESDIR):
        os.makedirs(CURRENCIESDIR)
    for module, info in {**currencies, **crypto_currencies}.items():
        out_text = module_tmpl.render(
            module_name=info['name'],
            currencies=info['currencies'])
        with open(
                os.path.join(CURRENCIESDIR, f'{module}.py'),
                mode='w+',
                encoding='utf-8') as file_out:
            file_out.write(out_text)
            file_out.truncate()
    out_text = init_tmpl.render(currencies={**currencies, **crypto_currencies})
    with open(
            os.path.join(CURRENCIESDIR, '__init__.py'),
            mode='w+',
            encoding='utf-8') as file_out:
        file_out.write(out_text)
        file_out.truncate()

    print('Creating currency tests...')
    if not os.path.exists(TESTSDIR):
        os.makedirs(TESTSDIR)
    for module, info in {**currencies, **crypto_currencies}.items():
        _class_list = [c.class_name for c in info['currencies']]
        if len(_class_list) > 1:
            class_list = '(\n    ' + ',\n    '.join(_class_list) + ')'
        else:
            class_list = _class_list[0]
        out_text = test_tmpl.render(
            module_name=info['name'],
            module_lname=module,
            currencies=info['currencies'],
            class_list=class_list)
        with open(
                os.path.join(TESTSDIR, f'test_{module}.py'),
                mode='w+',
                encoding='utf-8') as file_out:
            file_out.write(out_text)
            file_out.truncate()
    open(
        os.path.join(TESTSDIR, '__init__.py'),
        mode='w+',
        encoding='utf-8').close()

if __name__ == '__main__':
    sys.exit(main())

# pylint: enable=invalid-name,line-too-long
